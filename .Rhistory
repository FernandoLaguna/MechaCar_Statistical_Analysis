plt + geom_boxplot() #add boxplot
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy, colour = "#3366FF")) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1) #add boxplot and rotate x-axis labels 45 degrees
# Heatmap
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels
theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
#Add layers to plots
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
#Add layers to plots
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
# Heatmap
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels
theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
#Add layers to plots
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
# Heatmap
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels
theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
#Add layers to plots
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
#Add layers to plots
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
#Add layers to plots
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
#Add layers to plots
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
# Heatmap
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
# Heatmap
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels
theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
#Add layers to plots
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1))  #rotate x-axis labels 45 degrees
#Add layers to plots
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plot
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine))
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
View(mpg_long)
geom_point() #overlay scatter plot on top
mpg
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
mpg_visual <- mpg
View(mpg_visual)
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
mpg_long
mpg_long
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty)) #convert to long format
head(mpg_long)
mpg_long
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
mpg_long
View(mpg_long)
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
?facet_wrap()
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
#with facet
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") #rotate x-axis labels
#with facet
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
#with facet
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "left") + xlab("Manufacturer") #rotate x-axis labels
#with facet
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
#Facets
#Without facet
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy,cyl)) #convert to long format
head(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
#with facet
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
#Test for normality
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
mtcars(head)
head(mtcars)
#Test for normality
ggplot(mtcars,aes(x=wt)) #visualize distribution using density plot
#Test for normality
ggplot(mtcars,aes(x=wt)) #visualize distribution using density plot
#Test for normality
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
#Test for normality qualitative
?shapiro.test()
#Test for normality quantitative (Shapiro-Wilk)
shapiro.test(mtcars$wt)
?sample_n()
# visualize the distribution
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
?t.test()
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
#Two sample T test
> sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
> sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
#Two sample T test
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
?t.test()
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
View(mpg_2008)
View(mpg_1999)
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
?aov()
#ANOVA
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
View(mtcars_filt)
#ANOVA
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
head(mtcars_filt$cyl)
head(mtcars_filt$cyl)
head(mtcars_filt)
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt))
?cor()
head(mtcars)
#correlación
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
View(used_matrix)
View(used_cars)
?lm()
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
# graficar la regresión
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
View(model)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter
#multilinear regression
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
?chisq.test()
#Chi squared test
table(mpg$class,mpg$year) #generate contingency table
#Chi squared test
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
mpg(head)
head(mpg)
#Chi squared test
tbl <- table(mpg$class,mpg$year) #generate contingency table (tabla de frecuencias)
chisq.test(tbl) #compare categorical distributions
tbl <- table(mpg$year,mpg$class)
chisq.test(tbl) #compare categorical distributions
#Chi squared test
#generate contingency table (tabla de frecuencias)
chisq.test(tbl) #compare categorical distributions
chisq.test(tbl) #compare categorical distributions
tbl <- table(mpg$year,mpg$class)
chisq.test(tbl) #compare categorical distributions
library(jsonlite)
library(tidyverse)
library(jsonlite)
library(tidyverse)
library(dplyr)
?read.csv
demo_table <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
library(jsonlite)
library(tidyverse)
demo_table <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
View(demo_table)
View(mtcars)
View(demo_table)
library(jsonlite)
library(tidyverse)
MechaCar_table <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
#Perform linear regression
lm(mpg ~ mpg + vehicle_lenght + vehicle_weight + spoiler_angle + ground_clearence ´+ AWD ,data=MechaCar_table) #generate multiple linear regression model
#Perform linear regression
lm(mpg ~ mpg + vehicle_lenght + vehicle_weight + spoiler_angle + ground_clearence + AWD ,data=MechaCar_table) #generate multiple linear regression model
#Perform linear regression
lm(mpg ~ mpg + vehicle_length + vehicle_weight + spoiler_angle + ground_clearence + AWD ,data=MechaCar_table) #generate multiple linear regression model
#Perform linear regression
lm(mpg ~ mpg + vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD ,data=MechaCar_table) #generate multiple linear regression model
#Perform linear regression
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD ,data=MechaCar_table) #generate multiple linear regression model
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD ,data=MechaCar_table))
#Perform linear regression
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD ,data=MechaCar_table) #generate multiple linear regression model
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD ,data=MechaCar_table))
#Deliverable 2. Create Visualizations for the Trip Analysis
MechaCar_table <- read.csv(file='Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
#Deliverable 2. Create Visualizations for the Trip Analysis
Coil_table <- read.csv(file='Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
library(jsonlite)
library(tidyverse)
MechaCar_table <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
#Perform linear regression
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD ,data=MechaCar_table) #generate multiple linear regression model
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD ,data=MechaCar_table))
#Deliverable 2. Create Visualizations for the Trip Analysis
Coil_table <- read.csv(file='Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
statisticals <- Coil_table %>%  summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI) .groups = 'keep') #create stastics
statisticals <- Coil_table %>%  summarize(Mean=mean(PSI),Median=median(PSI),SD=sd(PSI) .groups = 'keep') #create stastics
statisticals <- Coil_table %>%  summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep') #create stastics
View(statisticals)
statisticals <- Coil_table %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep') #create stastics
#Deliverable 2. Create Visualizations for the Trip Analysis
Coil_table <- read.csv(file='Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
statisticals <- Coil_table %>%  summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep') #create stastics
group_statisticals <- Coil_table %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep') #create stastics
View(group_statisticals)
#Deliverable 2. Create Visualizations for the Trip Analysis
Coil_table <- read.csv(file='Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
total_summary <- Coil_table %>%  summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep') #create stastics
lot_summary <- Coil_table %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep') #create stastics
View(total_summary)
View(lot_summary)
View(total_summary)
View(lot_summary)
View(total_summary)
#t-test
t.test(log10(Coil_table$PSI),mu=1500) #compare sample versus population means
?t.test
?t.test()
t.test(Coil_table$PSI,Coil_table,Manufacturing_Lot)
t.test(Coil_table$PSI,Coil_table,Coil_table$Manufacturing_Lot)
t.test((log10(Coil_table$PSI),Coil_table,Coil_table$Manufacturing_Lot)
#t-test
t.test(log10(Coil_table$PSI),mu=1500) #compare sample versus population means
t.test((log10(Coil_table$PSI),Coil_table,Coil_table$Manufacturing_Lot)
Coil_table$PSI
t.test(Coil_table$PSI,Coil_table,Coil_table$Manufacturing_Lot)
t.test(Coil_table$PSI,Coil_table,Manufacturing_Lot==Lot1)
t.test(Coil_table$PSI,Coil_table,Coil_table$Manufacturing_Lot==Lot1)
t.test(Coil_table$PSI,Coil_table,Coil_table$Manufacturing_Lot=="Lot1")
t.test(PSI,Coil_table,Coil_table$Manufacturing_Lot=="Lot1")
Coil_table$
t.test(Coil_table$PSI,Coil_table,Coil_table$Manufacturing_Lot=="Lot1")
#t-test
t.test(log10(Coil_table$PSI),mu=1500) #compare sample versus population means
t.test(Coil_table$PSI,Coil_table,Coil_table$Manufacturing_Lot=="Lot1")
t.test(Coil_table$PSI,data=Coil_table,Coil_table$Manufacturing_Lot=="Lot1")
t.test(Coil_table$PSI,data=Coil_table,Coil_table$Manufacturing_Lot=="Lot2")
t.test(Coil_table$PSI,data=Coil_table,Coil_table$Manufacturing_Lot=="Lot3")
sleep
t.test(PSI ~ Manufacturing_Lot,data=Coil_table)
sleep
t.test(PSI ~ 1,data=Coil_table)
t.test(PSI ~ 2,data=Coil_table)
#t-test
t.test(log10(Coil_table$PSI),mu=1500) #compare sample versus population means
t.test(PSI ~ 1,data=Coil_table)
t.test(PSI ~ 2,data=Coil_table)
t.test(PSI ~ Manufacturing_Lot,data=Coil_table,Coil_table$Manufacturing_Lot=="Lot3")
plot(extra ~ group, data = sleep)
t.test
?
?t.test
?t.test
with(sleep, t.test(extra[group == 1], extra[group == 2]))
t.test(extra ~ group, data = sleep)
t.test(extra ~ 1, data = sleep)
library(jsonlite)
library(tidyverse)
#Read a file
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
demo_table2 <- fromJSON(txt='demo.json')
#Read a JSON file
demo_table2 <- fromJSON(txt='demo.json')
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
library(jsonlite)
library(tidyverse)
#Read a file
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
#Read a JSON file
demo_table2 <- fromJSON(txt='demo.json')
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
View(demo_table2)
View(filter_table2)
filter_table3 <- demo_table2[("clean" %in% demo_table2$title_status) & (demo_table2$price > 10000) & (demo_table2$drive == "4wd"),]
filter_table <- demo_table2[demo_table2$price > 10000,]
#filter with subsets
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
filter_table3 <- demo_table2[("clean" %in% demo_table2$title_status) & (demo_table2$price > 10000) & (demo_table2$drive == "4wd"),]
filter_table <- demo_table2[demo_table2$price > 10000,]
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
#Create a sample
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
#Create a sample for a dataset
num_rows <- 1:nrow(demo_table) #Create a numerical vector that is the same length as the number of rows in the data frame using the colon (:) operator
sample_rows <- sample(num_rows, 3) #sample 3 of those rows, as shown in this code:
demo_table[sample_rows,] # Finally, retrieve the requested data within the demo_table:
# Sample Combined in one code
demo_table[sample(1:nrow(demo_table), 3),]
View(demo_table)
#Read a file
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
View(demo_table)
#Read a JSON file
demo_table2 <- fromJSON(txt='demo.json')
#filter with subsets
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
filter_table3 <- demo_table2[("clean" %in% demo_table2$title_status) & (demo_table2$price > 10000) & (demo_table2$drive == "4wd"),]
filter_table <- demo_table2[demo_table2$price > 10000,]
#Create a sample
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
#Create a sample for a dataset
num_rows <- 1:nrow(demo_table) #Create a numerical vector that is the same length as the number of rows in the data frame using the colon (:) operator
sample_rows <- sample(num_rows, 3) #sample 3 of those rows, as shown in this code:
demo_table[sample_rows,] # Finally, retrieve the requested data within the demo_table:
#Create a sample for a dataset
num_rows <- 1:nrow(demo_table) #Create a numerical vector that is the same length as the number of rows in the data frame using the colon (:) operator
sample_rows <- sample(num_rows, 3) #sample 3 of those rows, as shown in this code:
demo_table[sample_rows,] # Finally, retrieve the requested data within the demo_table:
# Sample Combined in one code
demo_table[sample(1:nrow(demo_table), 3),]
#Mutate
library(tidyverse)
?mutate()
#Mutate
library(tidyverse)
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
# Group and average milage per condition
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'rowwise') #create summary table with multiple columns
# Reshape data
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
View(long_table)
View(demo_table3)
View(long_table)
View(long_table)
View(demo_table3)
View(long_table)
#Regresar a formato wide
wide_table <- long_table %>% spread(key="Metric",value="Score")
all_equal(demo_table3,wide_table)
table <-demo_table3[,order(colnames(wide_table))]
View(wide_table)
View(filter_table3)
View(demo_table3)
View(wide_table)
#Regresar a formato wide
wide_table <- long_table %>% spread(key="Metric",value="Score")
all_equal(demo_table3,wide_table) #Comprobamos que la tabla wide sea igual a la original
table <-demo_table3[,order(colnames(wide_table))]
View(table)
table <-demo_table3[,order(colnames(wide_table))]#Ordenamos las columnas para que queden iguales que la original
subset (Coil_table, Manufacturing_Lot=="Lot1")
library(jsonlite)
library(tidyverse)
MechaCar_table <- read.csv(file='MechaCar_mpg.csv',check.names=F,stringsAsFactors = F)
#Deliverable 1. Perform linear regression
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD ,data=MechaCar_table) #generate multiple linear regression model
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD ,data=MechaCar_table))
#Deliverable 2. Create Visualizations for the Trip Analysis
Coil_table <- read.csv(file='Suspension_Coil.csv',check.names=F,stringsAsFactors = F)
total_summary <- Coil_table %>%  summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep') #create stastics
lot_summary <- Coil_table %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI),SD=sd(PSI), .groups = 'keep') #create stastics
#t-test
t.test(log10(Coil_table$PSI),mu=1500) #compare sample versus population means
t.test(PSI ~ 1,data=Coil_table)
t.test(PSI ~ Manufacturing_Lot,data=Coil_table,Coil_table$Manufacturing_Lot=="Lot3")
t.test(Coil_table$PSI,data=Coil_table,Coil_table$Manufacturing_Lot=="Lot3")
subset (Coil_table, Manufacturing_Lot=="Lot1")
t.test(log10(Coil_table$PSI),mu=1500)
#t-test of Lot1
subset (Coil_table, Manufacturing_Lot=="Lot2")
t.test(log10(Coil_table$PSI),mu=1500)
#t-test of Lot3
subset (Coil_table, Manufacturing_Lot=="Lot3")
t.test(log10(Coil_table$PSI),mu=1500)
#t-test of all the lots
t.test(log10(Coil_table$PSI),mu=1500) #compare sample versus population means
t.test(log10(Coil_table$PSI),mu=1500)
t.test(log10(Coil_table$PSI),mu=1500)
#t-test of all the lots
t.test(log10(Coil_table$PSI),mu=1500) #compare sample versus population means
t.test(log10(Coil_table$PSI),mu=1500)
t.test(log10(Coil_table$PSI),mu=1500)
t.test(log10(Coil_table$PSI),mu=1500)
#t-test of Lot1
Lot1 <- subset (Coil_table, Manufacturing_Lot=="Lot1")
t.test(log10(Coil_table$PSI),mu=1500)
#t-test of Lot2
Lot2 <- subset (Coil_table, Manufacturing_Lot=="Lot2")
t.test(log10(Coil_table$PSI),mu=1500)
#t-test of Lot3
Lot3 <- subset (Coil_table, Manufacturing_Lot=="Lot3")
t.test(log10(Coil_table$PSI),mu=1500)
#t-test of all the lots
t.test(log10(Coil_table$PSI),mu=1500) #compare sample versus population means
#t-test of Lot1
Lot1 <- subset (Coil_table, Manufacturing_Lot=="Lot1")
t.test(log10(Coil_table$PSI),mu=1500)
#t-test of all the lots
t.test(log10(Coil_table$PSI),mu=1500) #compare sample versus population means
#t-test of Lot1
Lot1 <- subset (Coil_table, Manufacturing_Lot=="Lot1")
t.test(log10(Lot1$PSI),mu=1500)
#t-test of Lot2
Lot2 <- subset (Coil_table, Manufacturing_Lot=="Lot2")
t.test(log10(Lot2$PSI),mu=1500)
#t-test of Lot3
Lot3 <- subset (Coil_table, Manufacturing_Lot=="Lot3")
t.test(log10(Lot3$PSI),mu=1500)
#Chi squared test
#generate contingency table (tabla de frecuencias)
chisq.test(tbl) #compare categorical distributions
chisq.test(tbl) #compare categorical distributions
#multilinear regression
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
#Chi squared test
#generate contingency table (tabla de frecuencias)
chisq.test(tbl) #compare categorical distributions
chisq.test(tbl) #compare categorical distributions
tbl <- table(mpg$year,mpg$class)
chisq.test(tbl) #compare categorical distributions
View(table)
tbl <- table(mpg$year,mpg$class)
tbl
tbl <- table(mpg$year,mpg$class)
chisq.test(tbl) #compare categorical distributions
View(table)
View(table)
mpg
tbl <- table(mpg$year,mpg$class,mpg%drv)
tbl <- table(mpg$year,mpg$class)
chisq.test(tbl) #compare categorical distributions
